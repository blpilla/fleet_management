// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: association.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AssociationService_AssociateDriverToVehicle_FullMethodName    = "/proto.AssociationService/AssociateDriverToVehicle"
	AssociationService_GetAllAssociations_FullMethodName          = "/proto.AssociationService/GetAllAssociations"
	AssociationService_GetDriversByVehicle_FullMethodName         = "/proto.AssociationService/GetDriversByVehicle"
	AssociationService_GetVehiclesByDriver_FullMethodName         = "/proto.AssociationService/GetVehiclesByDriver"
	AssociationService_DissociateDriverFromVehicle_FullMethodName = "/proto.AssociationService/DissociateDriverFromVehicle"
)

// AssociationServiceClient is the client API for AssociationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Serviço de Associação
type AssociationServiceClient interface {
	AssociateDriverToVehicle(ctx context.Context, in *AssociateDriverToVehicleRequest, opts ...grpc.CallOption) (*AssociateDriverToVehicleResponse, error)
	GetAllAssociations(ctx context.Context, in *GetAllAssociationsRequest, opts ...grpc.CallOption) (*GetAllAssociationsResponse, error)
	GetDriversByVehicle(ctx context.Context, in *GetDriversByVehicleRequest, opts ...grpc.CallOption) (*GetDriversByVehicleResponse, error)
	GetVehiclesByDriver(ctx context.Context, in *GetVehiclesByDriverRequest, opts ...grpc.CallOption) (*GetVehiclesByDriverResponse, error)
	DissociateDriverFromVehicle(ctx context.Context, in *DissociateDriverFromVehicleRequest, opts ...grpc.CallOption) (*DissociateDriverFromVehicleResponse, error)
}

type associationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssociationServiceClient(cc grpc.ClientConnInterface) AssociationServiceClient {
	return &associationServiceClient{cc}
}

func (c *associationServiceClient) AssociateDriverToVehicle(ctx context.Context, in *AssociateDriverToVehicleRequest, opts ...grpc.CallOption) (*AssociateDriverToVehicleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssociateDriverToVehicleResponse)
	err := c.cc.Invoke(ctx, AssociationService_AssociateDriverToVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *associationServiceClient) GetAllAssociations(ctx context.Context, in *GetAllAssociationsRequest, opts ...grpc.CallOption) (*GetAllAssociationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAssociationsResponse)
	err := c.cc.Invoke(ctx, AssociationService_GetAllAssociations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *associationServiceClient) GetDriversByVehicle(ctx context.Context, in *GetDriversByVehicleRequest, opts ...grpc.CallOption) (*GetDriversByVehicleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDriversByVehicleResponse)
	err := c.cc.Invoke(ctx, AssociationService_GetDriversByVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *associationServiceClient) GetVehiclesByDriver(ctx context.Context, in *GetVehiclesByDriverRequest, opts ...grpc.CallOption) (*GetVehiclesByDriverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVehiclesByDriverResponse)
	err := c.cc.Invoke(ctx, AssociationService_GetVehiclesByDriver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *associationServiceClient) DissociateDriverFromVehicle(ctx context.Context, in *DissociateDriverFromVehicleRequest, opts ...grpc.CallOption) (*DissociateDriverFromVehicleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DissociateDriverFromVehicleResponse)
	err := c.cc.Invoke(ctx, AssociationService_DissociateDriverFromVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssociationServiceServer is the server API for AssociationService service.
// All implementations must embed UnimplementedAssociationServiceServer
// for forward compatibility.
//
// Serviço de Associação
type AssociationServiceServer interface {
	AssociateDriverToVehicle(context.Context, *AssociateDriverToVehicleRequest) (*AssociateDriverToVehicleResponse, error)
	GetAllAssociations(context.Context, *GetAllAssociationsRequest) (*GetAllAssociationsResponse, error)
	GetDriversByVehicle(context.Context, *GetDriversByVehicleRequest) (*GetDriversByVehicleResponse, error)
	GetVehiclesByDriver(context.Context, *GetVehiclesByDriverRequest) (*GetVehiclesByDriverResponse, error)
	DissociateDriverFromVehicle(context.Context, *DissociateDriverFromVehicleRequest) (*DissociateDriverFromVehicleResponse, error)
	mustEmbedUnimplementedAssociationServiceServer()
}

// UnimplementedAssociationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAssociationServiceServer struct{}

func (UnimplementedAssociationServiceServer) AssociateDriverToVehicle(context.Context, *AssociateDriverToVehicleRequest) (*AssociateDriverToVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssociateDriverToVehicle not implemented")
}
func (UnimplementedAssociationServiceServer) GetAllAssociations(context.Context, *GetAllAssociationsRequest) (*GetAllAssociationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAssociations not implemented")
}
func (UnimplementedAssociationServiceServer) GetDriversByVehicle(context.Context, *GetDriversByVehicleRequest) (*GetDriversByVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDriversByVehicle not implemented")
}
func (UnimplementedAssociationServiceServer) GetVehiclesByDriver(context.Context, *GetVehiclesByDriverRequest) (*GetVehiclesByDriverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVehiclesByDriver not implemented")
}
func (UnimplementedAssociationServiceServer) DissociateDriverFromVehicle(context.Context, *DissociateDriverFromVehicleRequest) (*DissociateDriverFromVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DissociateDriverFromVehicle not implemented")
}
func (UnimplementedAssociationServiceServer) mustEmbedUnimplementedAssociationServiceServer() {}
func (UnimplementedAssociationServiceServer) testEmbeddedByValue()                            {}

// UnsafeAssociationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssociationServiceServer will
// result in compilation errors.
type UnsafeAssociationServiceServer interface {
	mustEmbedUnimplementedAssociationServiceServer()
}

func RegisterAssociationServiceServer(s grpc.ServiceRegistrar, srv AssociationServiceServer) {
	// If the following call pancis, it indicates UnimplementedAssociationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AssociationService_ServiceDesc, srv)
}

func _AssociationService_AssociateDriverToVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociateDriverToVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssociationServiceServer).AssociateDriverToVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssociationService_AssociateDriverToVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssociationServiceServer).AssociateDriverToVehicle(ctx, req.(*AssociateDriverToVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssociationService_GetAllAssociations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAssociationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssociationServiceServer).GetAllAssociations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssociationService_GetAllAssociations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssociationServiceServer).GetAllAssociations(ctx, req.(*GetAllAssociationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssociationService_GetDriversByVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDriversByVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssociationServiceServer).GetDriversByVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssociationService_GetDriversByVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssociationServiceServer).GetDriversByVehicle(ctx, req.(*GetDriversByVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssociationService_GetVehiclesByDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVehiclesByDriverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssociationServiceServer).GetVehiclesByDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssociationService_GetVehiclesByDriver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssociationServiceServer).GetVehiclesByDriver(ctx, req.(*GetVehiclesByDriverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssociationService_DissociateDriverFromVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DissociateDriverFromVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssociationServiceServer).DissociateDriverFromVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssociationService_DissociateDriverFromVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssociationServiceServer).DissociateDriverFromVehicle(ctx, req.(*DissociateDriverFromVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssociationService_ServiceDesc is the grpc.ServiceDesc for AssociationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssociationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AssociationService",
	HandlerType: (*AssociationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssociateDriverToVehicle",
			Handler:    _AssociationService_AssociateDriverToVehicle_Handler,
		},
		{
			MethodName: "GetAllAssociations",
			Handler:    _AssociationService_GetAllAssociations_Handler,
		},
		{
			MethodName: "GetDriversByVehicle",
			Handler:    _AssociationService_GetDriversByVehicle_Handler,
		},
		{
			MethodName: "GetVehiclesByDriver",
			Handler:    _AssociationService_GetVehiclesByDriver_Handler,
		},
		{
			MethodName: "DissociateDriverFromVehicle",
			Handler:    _AssociationService_DissociateDriverFromVehicle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "association.proto",
}
