// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: driver.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DriverService_CreateDriver_FullMethodName  = "/proto.DriverService/CreateDriver"
	DriverService_GetDriverByID_FullMethodName = "/proto.DriverService/GetDriverByID"
	DriverService_GetAllDrivers_FullMethodName = "/proto.DriverService/GetAllDrivers"
	DriverService_UpdateDriver_FullMethodName  = "/proto.DriverService/UpdateDriver"
	DriverService_DeleteDriver_FullMethodName  = "/proto.DriverService/DeleteDriver"
)

// DriverServiceClient is the client API for DriverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Serviço de Driver
type DriverServiceClient interface {
	CreateDriver(ctx context.Context, in *CreateDriverRequest, opts ...grpc.CallOption) (*DriverResponse, error)
	GetDriverByID(ctx context.Context, in *GetDriverByIDRequest, opts ...grpc.CallOption) (*DriverResponse, error)
	GetAllDrivers(ctx context.Context, in *GetAllDriversRequest, opts ...grpc.CallOption) (*GetAllDriversResponse, error)
	UpdateDriver(ctx context.Context, in *UpdateDriverRequest, opts ...grpc.CallOption) (*DriverResponse, error)
	DeleteDriver(ctx context.Context, in *DeleteDriverRequest, opts ...grpc.CallOption) (*DeleteDriverResponse, error)
}

type driverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDriverServiceClient(cc grpc.ClientConnInterface) DriverServiceClient {
	return &driverServiceClient{cc}
}

func (c *driverServiceClient) CreateDriver(ctx context.Context, in *CreateDriverRequest, opts ...grpc.CallOption) (*DriverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DriverResponse)
	err := c.cc.Invoke(ctx, DriverService_CreateDriver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverServiceClient) GetDriverByID(ctx context.Context, in *GetDriverByIDRequest, opts ...grpc.CallOption) (*DriverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DriverResponse)
	err := c.cc.Invoke(ctx, DriverService_GetDriverByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverServiceClient) GetAllDrivers(ctx context.Context, in *GetAllDriversRequest, opts ...grpc.CallOption) (*GetAllDriversResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllDriversResponse)
	err := c.cc.Invoke(ctx, DriverService_GetAllDrivers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverServiceClient) UpdateDriver(ctx context.Context, in *UpdateDriverRequest, opts ...grpc.CallOption) (*DriverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DriverResponse)
	err := c.cc.Invoke(ctx, DriverService_UpdateDriver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverServiceClient) DeleteDriver(ctx context.Context, in *DeleteDriverRequest, opts ...grpc.CallOption) (*DeleteDriverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDriverResponse)
	err := c.cc.Invoke(ctx, DriverService_DeleteDriver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriverServiceServer is the server API for DriverService service.
// All implementations must embed UnimplementedDriverServiceServer
// for forward compatibility.
//
// Serviço de Driver
type DriverServiceServer interface {
	CreateDriver(context.Context, *CreateDriverRequest) (*DriverResponse, error)
	GetDriverByID(context.Context, *GetDriverByIDRequest) (*DriverResponse, error)
	GetAllDrivers(context.Context, *GetAllDriversRequest) (*GetAllDriversResponse, error)
	UpdateDriver(context.Context, *UpdateDriverRequest) (*DriverResponse, error)
	DeleteDriver(context.Context, *DeleteDriverRequest) (*DeleteDriverResponse, error)
	mustEmbedUnimplementedDriverServiceServer()
}

// UnimplementedDriverServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDriverServiceServer struct{}

func (UnimplementedDriverServiceServer) CreateDriver(context.Context, *CreateDriverRequest) (*DriverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDriver not implemented")
}
func (UnimplementedDriverServiceServer) GetDriverByID(context.Context, *GetDriverByIDRequest) (*DriverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDriverByID not implemented")
}
func (UnimplementedDriverServiceServer) GetAllDrivers(context.Context, *GetAllDriversRequest) (*GetAllDriversResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDrivers not implemented")
}
func (UnimplementedDriverServiceServer) UpdateDriver(context.Context, *UpdateDriverRequest) (*DriverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDriver not implemented")
}
func (UnimplementedDriverServiceServer) DeleteDriver(context.Context, *DeleteDriverRequest) (*DeleteDriverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDriver not implemented")
}
func (UnimplementedDriverServiceServer) mustEmbedUnimplementedDriverServiceServer() {}
func (UnimplementedDriverServiceServer) testEmbeddedByValue()                       {}

// UnsafeDriverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriverServiceServer will
// result in compilation errors.
type UnsafeDriverServiceServer interface {
	mustEmbedUnimplementedDriverServiceServer()
}

func RegisterDriverServiceServer(s grpc.ServiceRegistrar, srv DriverServiceServer) {
	// If the following call pancis, it indicates UnimplementedDriverServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DriverService_ServiceDesc, srv)
}

func _DriverService_CreateDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDriverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).CreateDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverService_CreateDriver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).CreateDriver(ctx, req.(*CreateDriverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverService_GetDriverByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDriverByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).GetDriverByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverService_GetDriverByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).GetDriverByID(ctx, req.(*GetDriverByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverService_GetAllDrivers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllDriversRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).GetAllDrivers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverService_GetAllDrivers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).GetAllDrivers(ctx, req.(*GetAllDriversRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverService_UpdateDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDriverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).UpdateDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverService_UpdateDriver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).UpdateDriver(ctx, req.(*UpdateDriverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverService_DeleteDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDriverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).DeleteDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverService_DeleteDriver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).DeleteDriver(ctx, req.(*DeleteDriverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DriverService_ServiceDesc is the grpc.ServiceDesc for DriverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DriverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DriverService",
	HandlerType: (*DriverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDriver",
			Handler:    _DriverService_CreateDriver_Handler,
		},
		{
			MethodName: "GetDriverByID",
			Handler:    _DriverService_GetDriverByID_Handler,
		},
		{
			MethodName: "GetAllDrivers",
			Handler:    _DriverService_GetAllDrivers_Handler,
		},
		{
			MethodName: "UpdateDriver",
			Handler:    _DriverService_UpdateDriver_Handler,
		},
		{
			MethodName: "DeleteDriver",
			Handler:    _DriverService_DeleteDriver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "driver.proto",
}
